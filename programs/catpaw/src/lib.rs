use anchor_lang::prelude::*;

mod instructions;
mod account_models;
// mod constant;

declare_id!("2E6gtXVfYgPQxfyNR2aBQ5CtEmsU3CCwed1N6sQ3gUEv");

#[program]
pub mod catpaw {
    use super::*;
    pub use super::instructions::*;
    
    //This function is called once when it is deployed
    pub fn init(ctx: Context<Initialize>) -> Result<()> {
        instructions::init(ctx)
    }

    //This function is called by gamer when gamer starts game on frontend with sending their A(CWP) token to contract address or specified address settled by cwv_treasury(contract owner).
    //The gamer puts their A token amount and clicks "start" button on frontend and calls "startgame" function of the contract.
    //If transaction is successed, the contract emits success event, and backend stores gamer address and A token amount on database.
    //At that time, total scratching count(1~5) has been generated and stored on backend database. 
    //Also frontend notificates game start event to gamer.
    pub fn startgame(ctx: Context<TransferA>, amount: u64) -> Result<()> {
        instructions::transfer_a(ctx, amount)
    }

    //This function is called by only backend(cwv_treasury wallet) for security when gamer finishs their all scratching following number of generated by backend when each game starts(1~5).
    //For each scratching under range of total count, the frontend sends request to the backend, and the backend responses with random number. 
    //Then Win or Loss is determined depends on this random bumber(this is same with current logic of frontend).
    //So "multiply is Win cound, and contract sends <amount * multiply> amount of CWV token to gamer.
    pub fn finish_game(ctx: Context<TransferCWV>, multiply: u64, amount: u64) -> Result<()> {
        instructions::transfer_cwv(ctx, multiply, amount)
    }

    //This function is called by only cwv_treasury, and changes A token address gamer have to send to contract to start game.
    //'ctx' includes new A token address as parameter.
    pub fn change_a(ctx: Context<ChangeA>) -> Result<()> {
        instructions::change_a(ctx)
    }

    //This function is called by only cwv_treasury, and it changes destination address gamer send their A token.
    //It can be a contract address itself or other address settled by cwv_treasury.
    //'ctx' includes new destination address as parameter.
    pub fn change_to(ctx: Context<ChangeTo>) -> Result<()> {
        instructions::change_to(ctx)
    }

    //This function is called by any address, and is used to deposite some amount of cwv token to contract address.
    pub fn deposit_cwv(ctx: Context<DepositCWV>, amount: u64) -> Result<()> {
        instructions::deposit_cwv(ctx, amount)
    }

    //This function is called by only cwv_treasury address, and withdraw amount of A token stored on contract itself(not using if A token is sent to other specified address).
    pub fn withdraw_a(ctx: Context<WithdrawA>, amount: u64) -> Result<()> {
        instructions::withdraw_a(ctx, amount)
    }
}
